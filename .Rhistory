labs(x='Experiment Group', y='', title='Renewal MRR')
# Plot expansion mrr per group
expansion <- ggplot(expansion_group, aes(x=group, y=total_expansion_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Expansion MRR')
# Plot contraction mrr per group
contraction <- ggplot(contraction_group, aes(x=group, y=total_contraction_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Contraction MRR')
# Plot churn mrr per group
churn <- ggplot(churn_group, aes(x=group, y=total_churn_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Churn MRR')
# Plot
grid.arrange(new, renewal, expansion, contraction, churn, ncol=2)
library(gridExtra)
# Group users by experiment group and plan
new_group <- users %>%
group_by(group) %>%
summarise(total_new_mrr = sum(new_mrr))
# Group users by experiment group and plan
renewal_group <- users %>%
group_by(group) %>%
summarise(total_renewal_mrr = sum(renewal_mrr))
# Group users by experiment group and plan
expansion_group <- users %>%
group_by(group) %>%
summarise(total_expansion_mrr = sum(expansion_mrr))
# Group users by experiment group and plan
contraction_group <- users %>%
group_by(group) %>%
summarise(total_contraction_mrr = sum(contraction_mrr))
# Group users by experiment group and plan
churn_group <- users %>%
group_by(group) %>%
summarise(total_churn_mrr = sum(churn_mrr))
# Plot new mrr per group
new <- ggplot(new_group, aes(x=group, y=total_new_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='New MRR')
# Plot renewal mrr per group
renewal <- ggplot(renewal_group, aes(x=group, y=total_renewal_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Renewal MRR')
# Plot expansion mrr per group
expansion <- ggplot(expansion_group, aes(x=group, y=total_expansion_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Expansion MRR')
# Plot contraction mrr per group
contraction <- ggplot(contraction_group, aes(x=group, y=total_contraction_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Contraction MRR')
# Plot churn mrr per group
churn <- ggplot(churn_group, aes(x=group, y=total_churn_mrr, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Churn MRR')
# Plot
grid.arrange(new, renewal, expansion, contraction, churn, ncol=2)
# Do the test!
t.test(control$net_mrr, enabled$net_mrr)
summary(users)
# Do a proportion test
ns <- c(983, 1011)
nt <- c(28658,28202)
# Do it!
prop.test(ns,nt)
# Do a proportion test for business
ns <- c(94, 133)
nt <- c(28658,28202)
# Do it!
prop.test(ns,nt)
client_id = Sys.getenv("LOOKER_API3_CLIENT_ID")
secret = Sys.getenv("LOOKER_API3_CLIENT_SECRET")
base_url = "https://looker.buffer.com:19999"
login <- function(client_id, secret) {
POST(modify_url(base_url, path='login', query =list(client_id=client_id, client_secret=secret)))
}
run_look <- function(look_id, format, token) {
GET(modify_url("https://looker.buffer.com:19999",
path = paste('api', '3.0', 'looks', look_id, 'run','csv', sep = '/')) ,
add_headers(Authorization = paste('token', token), Accept = 'text'))
}
# Connect to Looker
login <- login(client_id, secret)
# Get token
token <- content(login)$access_token
# Get data from Look
data <- run_look('3169', 'csv', token)
con <- textConnection(content(data))
charges <- read.csv(con, header = T)
names(charges) <- c('user_id','group','charges','total_charged','total_failed',
'total_refunded','total_net')
# Group by experiment group
by_group <- charges %>%
group_by(group) %>%
summarise(total_charged = sum(total_charged),
total_failed = sum(total_failed),
total_refunded = sum(total_refunded),
total_net = total_net)
# Group by experiment group
by_group <- charges %>%
group_by(group) %>%
summarise(total_charged = sum(total_charged),
total_failed = sum(total_failed),
total_refunded = sum(total_refunded),
total_net = sum(total_net))
# Make the plots
net <- ggplot(by_group, aes(x=group, y=total_net, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Net Stripe Charges')
charged <- ggplot(by_group, aes(x=group, y=total_charged, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Stripe Charges')
refunded <- ggplot(by_group, aes(x=group, y=total_refunded, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Refunded Charges')
failed <- ggplot(by_group, aes(x=group, y=total_failed, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Failed Charges')
grid.arrange(net,charged,refunded,failed, ncol=2)
control <- charges %>% filter(group=='control')
enabled <- charges %>% filter(group=='enabled')
p1 <- ggplot(control, aes(x=charges)) +
geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Histogram')
p2 <- ggplot(enabled, aes(x=charges)) +
geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Histogram')
grid.arrange(p1,p2,ncol=1)
control <- charges %>% filter(group=='control')
enabled <- charges %>% filter(group=='enabled')
p1 <- ggplot(control, aes(x=charges)) +
geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Histogram')
p2 <- ggplot(enabled, aes(x=charges)) +
geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Histogram')
grid.arrange(p1,p2,ncol=2)
control <- charges %>% filter(group=='control' & charges > 0)
enabled <- charges %>% filter(group=='enabled' & charges > 0)
p1 <- ggplot(control, aes(x=charges)) +
geom_histogram(binwidth=1, color='white') +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Histogram')
p2 <- ggplot(enabled, aes(x=charges)) +
geom_histogram(binwidth=1, color='white') +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Histogram')
grid.arrange(p1,p2,ncol=2)
control <- charges %>% filter(group=='control' & charges > 0)
enabled <- charges %>% filter(group=='enabled' & charges > 0)
p1 <- ggplot(control, aes(x=charges)) +
geom_histogram(binwidth=1, color='white') +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Control')
p2 <- ggplot(enabled, aes(x=charges)) +
geom_histogram(binwidth=1, color='white') +
coord_cartesian(xlim=c(0,5)) +
labs(x='Number of Charges', y='Users', title='Number of Charges Enabled')
grid.arrange(p1,p2,ncol=2)
charges <- charges %>%
mutate(amount_per_charge = total_net/charges)
# Plot the density curves
ggplot(filter(charges, charges > 0), aes(x=amonut_per_charge, fill=group)) +
geom_density(alpha=0.3)
charges <- charges %>%
mutate(amount_per_charge = total_net/charges)
# Plot the density curves
ggplot(filter(charges, charges > 0), aes(x=amount_per_charge, fill=group)) +
geom_density(alpha=0.3)
charges <- charges %>%
mutate(amount_per_charge = total_net/charges)
# Plot the density curves
ggplot(filter(charges, charges > 0), aes(x=amount_per_charge, fill=group)) +
geom_density(alpha=0.3) +
coord_cartesian(xlim=c(0,200))
charges <- charges %>%
mutate(amount_per_charge = total_net/charges)
# Plot the density curves
ggplot(filter(charges, charges > 0), aes(x=amount_per_charge, fill=group)) +
geom_density(alpha=0.3) +
coord_cartesian(xlim=c(0,200)) +
labs(x='Amount per Charge',y='',title='Amount per Charge Density Curve')
# Group by experiment group
by_group <- charges %>%
group_by(group) %>%
summarise(total_charged = sum(total_charged),
total_failed = sum(total_failed),
total_refunded = sum(total_refunded),
total_net = sum(total_net),
number_of_charges = sum(charges))
# Make the plots
net <- ggplot(by_group, aes(x=group, y=total_net, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Net Stripe Charges')
charged <- ggplot(by_group, aes(x=group, y=total_charged, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Stripe Charges')
refunded <- ggplot(by_group, aes(x=group, y=total_refunded, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Refunded Charges')
failed <- ggplot(by_group, aes(x=group, y=total_failed, fill=group)) +
geom_bar(stat='identity') +
labs(x='Experiment Group', y='', title='Total Failed Charges')
grid.arrange(net,charged,refunded,failed, ncol=2)
# Test difference in net amount charged
t.test(control$total_net, enabled$total_net)
# Test difference in number of charges
t.test(filter(charges,group=='control')$number_of_charges,
filter(charges,group=='enabled')$number_of_charges)
# Test difference in number of charges
t.test(filter(charges,group=='control')$charges,
filter(charges,group=='enabled')$charges)
install.packages(c('microbenchmark','profviz'))
shiny::runApp('Documents/mrr_forecaster')
table(users$group)
ns <- c(2349,2676)
nt <- c(28658,28202)
prop.test(ns,nt)
client_id = Sys.getenv("LOOKER_API3_CLIENT_ID")
secret = Sys.getenv("LOOKER_API3_CLIENT_SECRET")
base_url = "https://looker.buffer.com:19999"
login <- function(client_id, secret) {
POST(modify_url(base_url, path='login', query =list(client_id=client_id, client_secret=secret)))
}
run_look <- function(look_id, format, token) {
GET(modify_url("https://looker.buffer.com:19999",
path = paste('api', '3.0', 'looks', look_id, 'run','csv', sep = '/')) ,
add_headers(Authorization = paste('token', token), Accept = 'text'))
}
# Connect to Looker
login <- login(client_id, secret)
# Get token
token <- content(login)$access_token
# Get data from Look
data <- run_look('3171', 'csv', token)
con <- textConnection(content(data))
upgrades <- read.csv(con, header = T)
# Rename columns
names(upgrades) <- c('group','user_id','billing_plan','plan_id','upgrade_date',
'created_date','new_mrr','renewal_mrr','expansion_mrr')
# Set dates as date objects
upgrades$upgrade_date <- as.Date(upgrades$upgrade_date)
upgrades$created_date <- as.Date(upgrades$created_date)
# Calcualte time to upgrade
upgrades <- upgrades %>%
mutate(days_to_upgrade = as.numeric(upgrade_date - created_date))
# Plot time to upgrade
ggplot(upgrades, aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3)
# Plot time to upgrade
ggplot(upgrades, aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3)
# Plot time to upgrade for plans
ggplot(upgrades, aes(x=days_to_upgrade, color=group)) +
stat_ecdf(size=1)
# Plot time to upgrade
ggplot(upgrades, aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3)
# Plot time to upgrade for plans
ggplot(filter(upgrades,plan_id=='pro-monthly' | plan_id=='pro-annual'), aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3)
# Plot time to upgrade for plans
ggplot(filter(upgrades,billing_plan=='awesome' | billing_plan=='new_awesome'),
aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3)
# Plot time to upgrade for plans
ggplot(filter(upgrades,plan_id=='pro-monthly' | plan_id=='pro-annual'),
aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3) +
scale_x_continuous(limits = c(0,56), breaks=seq(0,56,14))
# Plot time to upgrade
ggplot(upgrades, aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3) +
scale_x_continuous(limits = c(0,56), breaks=seq(0,56,14))
table(upgrades$plan_id)
# Plot time to upgrade
ggplot(upgrades, aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3) +
scale_x_continuous(limits = c(0,56), breaks=seq(0,56,14)) +
labs(x='Days to Upgrade',y='Percent of Users', title='Days to Upgrade Density')
# Plot time to upgrade for plans
ggplot(filter(upgrades,plan_id=='pro-monthly' | plan_id=='pro-annual'),
aes(x=days_to_upgrade, fill=group)) +
geom_density(alpha=0.3) +
scale_x_continuous(limits = c(0,56), breaks=seq(0,56,14)) +
labs(x='Days to Upgrade',y='Percent of Users', title='Days to Upgrade Density')
# Group the upgrades by plan and experiment group
by_group <- upgrades %>%
group_by(group, plan_id) %>%
summarise(med_upgrade_time = median(days_to_upgrade))
# Plot this out for plans
ggplot(by_group, aes(x=plan_id, y=med_upgrade_time, fill=group)) +
geom_bar(stat='identity', position='dodge') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x='Plan', y='', title='Median Upgrade Time per Group')
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
# Load libraries
library(buffer); library(dplyr); library(ggplot2); library(tidyr)
# Get the data from Looker
subs <- get_look(3861)
# Rename columns
colnames(subs) <- c('user_id', 'user_joined_at', 'team_members', 'profiles',
'created_at', 'canceled_at', 'id', 'status', 'plan', 'billing_cycle',
'amount', 'days_to_activate', 'country', 'referred_by_marketing',
'visited_before_joining', 'charges', 'nps_responses', 'nps_score',
'helpscout_convos')
# Set dates as date objects
subs$user_joined_at <- as.Date(subs$user_joined_at, "%Y-%m-%d")
subs$created_at <- as.Date(subs$created_at, "%Y-%m-%d")
subs$canceled_at <- as.Date(subs$canceled_at, "%Y-%m-%d")
# Set NPS score as a factor
subs$nps_score <- as.factor(subs$nps_score)
# Set id as character type
subs$id <- as.character(subs$id)
# Filter out plans
small <- subs %>%
filter(plan == 'business_v2_small_monthly')
# Calculate subscription length
small <- small %>%
mutate(length = as.numeric(canceled_at - created_at),
churned = ifelse(is.na(canceled_at), 0, 1)) %>%
mutate(churned_90_days = ifelse((length <= 90 & !(is.na(length))), 1, 0))
# See how many churned
small %>%
group_by(churned) %>%
summarise(subs = n_distinct(id)) %>%
mutate(percent = subs / sum(subs))
con <- redshift_connect()
load('~/business_updates.Rda')
save(updates, file = "~/business_updates.Rda")
save(updates, file = "~/business_updates.Rda")
getwd()
setwd("/Users/julianwinternheimer/Documents/analysis")
save(updates, file = "~/business_updates.Rda")
save(activity, file = "~/business_activity.Rda")
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = "id")  %>%
right_join(activity, by = "id")
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = "id")
View(bus)
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = c("id" = "id", "user_id" = "user_id")
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = c("id" = "id", "user_id" = "user_id"))
subs$user_id <- as.character(subs$user_id)
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = c("id" = "id", "user_id" = "user_id"))
# Filter out plans
small <- subs %>%
filter(plan == 'business_v2_small_monthly')
# Calculate subscription length
small <- small %>%
mutate(length = as.numeric(canceled_at - created_at),
churned = ifelse(is.na(canceled_at), 0, 1)) %>%
mutate(churned_90_days = ifelse((length <= 90 & !(is.na(length))), 1, 0))
# See how many churned
small %>%
group_by(churned) %>%
summarise(subs = n_distinct(id)) %>%
mutate(percent = subs / sum(subs))
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = c("id" = "id", "user_id" = "user_id"))
con <- redshift_connect()
con <- redshift_connect()
save(activity, file = "~/business_activity.Rda")
load('~/business_activity.Rda')
# Join updates and subscription data
bus <- updates %>%
right_join(small, by = c("id" = "id", "user_id" = "user_id")) %>%
full_join(activity, by = c("id" = "id", "user_id" = "user_id"))
# Define function to get first date of week
start_of_week <- function(date) {
date - (setNames(c(6,0:5),0:6) [strftime(date,'%w')])
}
# Find churn week
bus <- bus %>%
mutate(churn_week = start_of_week(canceled_at))
# Select columns
bus <- bus %>%
select(id:updates_count, created_at, canceled_at, churned:churn_week)
# Define function to get first date of week
start_of_week <- function(date) {
date - (setNames(c(6,0:5),0:6) [strftime(date,'%w')])
}
# Find churn week
bus <- bus %>%
mutate(churn_week = start_of_week(canceled_at))
weeks <- seq(from = "2016-01-01", to = Sys.Date(), by = "week")
weeks <- seq(from = as.Date("2016-01-01"), to = Sys.Date(), by = "week")
weeks <- as.data.frame(weeks)
# Define function to set first day of week as Sunday
start_of_week <- function(date) {
date - (setNames(c(6,0:5),0:6) [strftime(date,'%w')])
}
# Get a sequence of weeks
weeks <- seq(from = as.Date("2016-01-01"), to = Sys.Date(), by = "week")
# Make a dataframe
weeks <- as.data.frame(weeks) %>%
mutate(week = start_of_week(weeks))
View(weeks)
# Define function to set first day of week as Sunday
start_of_week <- function(date) {
date - (setNames(c(6,0:5),0:6) [strftime(date,'%w')])
}
# Get a sequence of weeks
weeks <- seq(from = as.Date("2016-01-01"), to = Sys.Date(), by = "week")
# Make a dataframe
weeks <- as.data.frame(weeks) %>%
mutate(week = start_of_week(weeks)) %>%
select(-weeks)
View(updates)
View(activity)
# Define function to set first day of week as Sunday
start_of_week <- function(date) {
date - (setNames(c(6,0:5),0:6) [strftime(date,'%w')])
}
# Get a sequence of weeks
weeks <- seq(from = as.Date("2016-03-14"), to = Sys.Date(), by = "week")
# Make a dataframe
weeks <- as.data.frame(weeks) %>%
mutate(week = start_of_week(weeks)) %>%
select(-weeks)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week")
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = c(as.Date("week") = "week"))
weeks$week <- as.POSIXct(weeks$week)
bus <- updates %>%
right_join(weeks, by = "week")
View(bus)
# Define function to set first day of week as Sunday
start_of_week <- function(date) {
date - (setNames(c(6,0:5),0:6) [strftime(date,'%w')])
}
# Get a sequence of weeks
weeks <- seq(from = as.Date("2016-03-14"), to = Sys.Date(), by = "week")
# Make a dataframe
weeks <- as.data.frame(weeks) %>%
mutate(week = start_of_week(weeks)) %>%
select(-weeks)
updates$week <- as.Date(updates$week)
# Set as date object
updates$week <- as.Date(updates$week)
activity$activity_week <- as.Date(activity$activity_week)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week")
# Set as date object
updates$week <- as.Date(updates$week)
activity$activity_week <- as.Date(activity$activity_week)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week") %>%
full_join(activity, by = c("week" = "activity_week", "user_id" = "user_id"))
# Set as date object
updates$week <- as.Date(updates$week)
activity$activity_week <- as.Date(activity$activity_week)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week") %>%
full_join(activity, by = c("week" = "activity_week", "user_id" = "user_id", "id" = "id"))
# Set as date object
updates$week <- as.Date(updates$week)
activity$activity_week <- as.Date(activity$activity_week)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week") %>%
full_join(activity, by = c("week" = "activity_week", "user_id" = "user_id", "id" = "id")) %>%
left_join(small, by = c("user_id" = "user_id", "id" = "id"))
View(bus)
# Set as date object
updates$week <- as.Date(updates$week)
activity$activity_week <- as.Date(activity$activity_week)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week") %>%
full_join(activity, by = c("week" = "activity_week", "user_id" = "user_id", "id" = "id")) %>%
left_join(select(small, c('id', 'user_id', 'canceled_at')),
by = c("user_id" = "user_id", "id" = "id"))
# Set as date object
updates$week <- as.Date(updates$week)
activity$activity_week <- as.Date(activity$activity_week)
# Join updates and activity
bus <- updates %>%
right_join(weeks, by = "week") %>%
full_join(activity, by = c("week" = "activity_week", "user_id" = "user_id", "id" = "id")) %>%
left_join(select(small, c(1, 6, 7)),
by = c("user_id" = "user_id", "id" = "id"))
View(bus)
# Churn week
bus <- bus %>%
mutate(churn_week = start_of_week(canceled_at))
# Churn week
bus <- bus %>%
mutate(churn_week = start_of_week(canceled_at)) %>%
mutate(canceled_this_week = churn_week == week)
