select(-name:group)
updates <- updates %>%
select(user_id, update_week, updates)
user_updates <- users %>%
left_join(updates, by = 'user_id)
user_updates <- users %>%
left_join(updates, by = 'user_id')
updates$update_week <- as.Date(updates$update_week)
user_updates <- users %>%
left_join(updates, by = 'user_id')
# Get week 1
week1 <- user_updates %>%
filter(week_num == 1)
table(is.na(week1$updates))
user_updates[is.na(user_updates)] <- 0
user_updates$updates[is.na(user_updates$updates)] <- 0
week1 <- user_updates %>%
filter(week_num == 1)
View(week1)
# Get week 1
week1 <- user_updates %>%
filter(week_num == 1) %>%
mutate(reactivated = (updates > 0))
week1 %>%
group_by(group, reactivated) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users / sum(users))
user_updates %>%
mutate(reactivated = (updates > 0)) %>%
group_by(group, week_num, reactivated) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users / sum(users))
user_updates %>%
mutate(reactivated = (updates > 0)) %>%
group_by(week_num, group, reactivated) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users / sum(users))
user_updates %>%
mutate(reactivated = (updates > 0)) %>%
group_by(week_num, group, reactivated) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users / sum(users)) %>%
filter(reactivated == TRUE)
ggplot(by_group, aes(x = group, y = proportion, fill = week_num)) +
geom_bar(stat = 'identity')
# Replace NAs with 0s
user_updates$updates[is.na(user_updates$updates)] <- 0
# Group by experiment group
by_group <- user_updates %>%
mutate(reactivated = (updates > 0)) %>%
group_by(week_num, group, reactivated) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users / sum(users)) %>%
filter(reactivated == TRUE)
by_group
ggplot(by_group, aes(x = group, y = proportion, fill = week_num)) +
geom_bar(stat = 'identity')
ggplot(by_group, aes(x = group, y = proportion, fill = as.factor(week_num))) +
geom_bar(stat = 'identity')
ggplot(by_group, aes(x = group, y = proportion, fill = as.factor(week_num))) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(by_group, aes(x = week_num, y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(by_group, aes(x = as.factor(week_num), y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(by_group, aes(x = as.factor(week_num), y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Week', y = '', title = 'Reactivation Rate')
ggplot(by_group, aes(x = as.factor(week_num), y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Week', y = '', title = 'Reactivation Rate')
ggplot(by_group, aes(x = as.factor(week_num), y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label=proportion), position=position_dodge(width=0.9), vjust=-0.25) +
labs(x = 'Week', y = '', title = 'Reactivation Rate')
ggplot(by_group, aes(x = as.factor(week_num), y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label=round(proportion,2)), position=position_dodge(width=0.9), vjust=-0.25) +
labs(x = 'Week', y = '', title = 'Reactivation Rate')
ggplot(by_group, aes(x = as.factor(week_num), y = proportion, fill = group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label=round(proportion,3)), position=position_dodge(width=0.9), vjust=-0.25) +
labs(x = 'Week', y = '', title = 'Reactivation Rate')
nchar("evt_AoQ3B2rXaeeXlosi_0AKB1g47iwqlaZWUon5DzvYEchurn")
nchar("evt_AoQ3B2rXaeeXlosi_0AKB1g47iwqlaZWUon5DzvYEchurn")
nchar("evt_ApVxpU4FXHaQ8usi_0ATqvn47iwqlaZWUBiu2VBmEdowngrade_in")
library(dplyr); library(buffer); library(ggplot2)
con <- redshift_connect()
colnames(profiles) <- c('profiles', 'user_id')
summary(profiles$profiles)
Sys.Date() - as.Date('2017-04-25')
library(dplyr); library(buffer); library(ggplot2)
con <- redshift_connect()
getwd()
setwd("/Users/julianwinternheimer/Documents/analysis")
save(updates, file = "queue_updates.Rda")
load('queue_updates.Rda')
View(updates)
updates %>%
group_by(full_scope) %>%
count
updates %>%
group_by(full_scope) %>%
summarise(count = n()) %>%
arrange(desc(count))
updates %>%
group_by(full_scope) %>%
summarise(count = n()) %>%
arrange(desc(count))
updates$type[now_index] = "now"
updates$type <- character()
updates$type <- character(nrow(updates))
updates$type[now_index] = "now"
now_index <- grep("now",updates$full_scope, ignore.case = T)
updates$type[now_index] = "now"
# Get index of updates that contain 'schedule' in full_scope
schedule_index <- grep("schedule", updates$full_scope, ignore.case = T)
# Set the type of these rows to 'custom_schedule'
updates$type[schedule_index] = "custom_schedule"
View(updates)
updates[updates$type == ""]$type <- 'queue'
updates[updates$type == "", ]$type <- 'queue'
# Group by update type
updates %>%
group_by(type) %>%
summarise(users = n_distinct(user_id), updates = sum(count)) %>%
mutate(updates_percent = updates / sum(updates))
# Group by update type
updates %>%
group_by(type) %>%
summarise(users = n_distinct(user_id), updates = sum(count)) %>%
mutate(updates_percent = updates / sum(updates)) %>%
arrange(desc(updates_percent))
# Group by user
by_user <- updates %>%
group_by(user_id, type) %>%
summarise(updates = sum(count))
library(tidyr)
# Spread the update types
spread <- by_user %>%
spread(type, updates)
spread[is.na(spread)] <- 0
long <- spread %>%
gather(type, updates, custom_schedule:queue)
user_proportions <- long %>%
group_by(user_id, type) %>%
summarise(updates = updates) %>%
mutate(proportion = updates / sum(updates))
# Calculate proportions for each user
proportions <- long %>%
group_by(user_id, type) %>%
summarise(updates = updates) %>%
mutate(proportion = updates / sum(updates))
ggplot(filter(proportions, type == 'queue'), aes(x = proportion)) +
geom_density()
ggplot(filter(proportions, type == 'custom_schedule'), aes(x = proportion)) +
geom_density()
ggplot(filter(proportions, type == 'now'), aes(x = proportion)) +
geom_density()
# Group by user
by_user <- updates %>%
group_by(user_id, type) %>%
summarise(updates = sum(count)) %>%
filter(updates >= 5)
library(tidyr)
# Spread the update types
spread <- by_user %>%
spread(type, updates)
# Replace the new NAs with 0
spread[is.na(spread)] <- 0
# Now gather the updates into tidy format again
long <- spread %>%
gather(type, updates, custom_schedule:queue)
# Calculate proportions for each user
proportions <- long %>%
group_by(user_id, type) %>%
summarise(updates = updates) %>%
mutate(proportion = updates / sum(updates))
ggplot(filter(proportions, type == 'now'), aes(x = proportion)) +
geom_density() +
labs(x = 'Proportion )
ggplot(filter(proportions, type == 'now'), aes(x = proportion)) +
ggplot(filter(proportions, type == 'now'), aes(x = proportion)) +
geom_density() +
labs(x = 'Proportion')
library(gridExtra)
# Custom plot
custom_plot <- ggplot(filter(proportions, type == 'custom_schedule'), aes(x = proportion)) +
geom_density() +
labs(x = 'Proportion')
# Queue plot
queue_plot <- ggplot(filter(proportions, type == 'queue'), aes(x = proportion)) +
geom_density() +
labs(x = 'Proportion')
grid.arrange(custom_plot, queue_plot, nrow = 2)
library(gridExtra)
# Custom plot
custom_plot <- ggplot(filter(proportions, type == 'custom_schedule'), aes(x = proportion)) +
geom_density() +
labs(x = 'Proportion')
# Queue plot
queue_plot <- ggplot(filter(proportions, type == 'queue'), aes(x = proportion)) +
geom_density() +
labs(x = 'Proportion')
grid.arrange(custom_plot, queue_plot, nrow = 2)
library(gridExtra)
# Custom plot
custom_plot <- ggplot(filter(proportions, type == 'custom_schedule'), aes(x = proportion)) +
geom_density() +
theme(axis.text.x=element_blank()) +
labs(x = 'Proportion')
# Queue plot
queue_plot <- ggplot(filter(proportions, type == 'queue'), aes(x = proportion)) +
geom_density() +
theme(axis.text.x=element_blank()) +
labs(x = 'Proportion')
grid.arrange(custom_plot, queue_plot, nrow = 2)
library(gridExtra)
# Custom plot
custom_plot <- ggplot(filter(proportions, type == 'custom_schedule'), aes(x = proportion)) +
geom_density() +
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
labs(x = 'Proportion')
# Queue plot
queue_plot <- ggplot(filter(proportions, type == 'queue'), aes(x = proportion)) +
geom_density() +
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
labs(x = 'Proportion')
grid.arrange(custom_plot, queue_plot, nrow = 2)
library(gridExtra)
# Custom plot
custom_plot <- ggplot(filter(proportions, type == 'custom_schedule'), aes(x = proportion)) +
geom_density() +
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
labs(x = 'Proportion of Updates Custom Scheduled')
# Queue plot
queue_plot <- ggplot(filter(proportions, type == 'queue'), aes(x = proportion)) +
geom_density() +
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
labs(x = 'Proportion of Updates Sent to Queue')
grid.arrange(custom_plot, queue_plot, nrow = 2)
grid.arrange(custom_plot, queue_plot, nrow = 2)
updates$user_id <- as.factor(updates$user_id)
library(buffer); library(dplyr); library(ggplot2)
con <- redshift_connect()
users <- get_look(3919)
users <- get_look(3919)
colnames(users) <- c('user_id', 'created_at', 'updates', 'days')
users$created_at <- as.Date(users$created_at)
users <- users %>%
mutate(days_since_join = as.numeric(Sys.Date() - created_at))
View(users)
users <- users %>%
mutate(updates_per_day = updates / days_since_join,
updates_per_update_day = updates / days)
ggplot(users, aes(x = updates_per_day)) +
geom_density()
ggplot(users, aes(x = updates_per_day)) +
geom_density() +
scale_x_continuous(limits = c(0, 100))
ggplot(users, aes(x = updates_per_day)) +
geom_density() +
scale_x_continuous(limits = c(0, 100))
cuts <- unique(as.numeric(quantile(users$updates_per_day, probs = seq(0, 1, 0.1))))
View(users)
quantile(users$updates_per_day, probs = seq(0, 1, 0.1))
quantile(users$updates_per_day, probs = seq(0, 1, 0.1), na.rm = TRUE)
ggplot(users, aes(x = updates_per_day)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(limits = c(0, 50))
ggplot(users, aes(x = updates_per_day)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(limits = c(0, 20))
ggplot(users, aes(x = updates_per_day)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(limits = c(0, 20)) +
labs(x = 'Updates Per Day', y = 'Users')
ggplot(users, aes(x = updates_per_day)) +
geom_histogram(binwidth = 1, color = 'white') +
scale_x_continuous(limits = c(0, 20)) +
labs(x = 'Updates Per Day', y = 'Users')
users[is.na(users)] <- 0
ggplot(users, aes(x = round(updates_per_day, 0))) +
geom_histogram(binwidth = 1, color = 'white') +
scale_x_continuous(limits = c(0, 20)) +
labs(x = 'Updates Per Day', y = 'Users')
# Rename columns
colnames(users) <- c('user_id', 'created_at', 'updates', 'days')
# Set dates as date objects
users$created_at <- as.Date(users$created_at)
# Calculate days since joined
users <- users %>%
mutate(days_since_join = as.numeric(Sys.Date() - created_at))
users <- users %>%
mutate(updates_per_day = round(updates / days_since_join, 0),
updates_per_update_day = updates / days)
users <- get_look(3919)
# Rename columns
colnames(users) <- c('user_id', 'created_at', 'updates', 'days')
# Set dates as date objects
users$created_at <- as.Date(users$created_at)
# Calculate days since joined
users <- users %>%
mutate(days_since_join = as.numeric(Sys.Date() - created_at))
# Calculate updates per day
users <- users %>%
mutate(updates_per_day = updates / days_since_join,
updates_per_update_day = updates / days)
ggplot(users, aes(x = updates_per_day)) +
geom_density() +
scale_x_continuous(limits = c(0, 100))
users <- users %>%
mutate(updates_rounded = round(updates_per_day, 0))
ggplot(users, aes(x = updates_rounded)) +
geom_histogram(binwidth = 1, color = 'white') +
scale_x_continuous(limits = c(0, 20)) +
labs(x = 'Updates Per Day', y = 'Users')
by_updates <- users %>%
group_by(updates_rounded) %>%
summarise(users = n_distinct(user_id))
ggplot(by_updates, aes(x = updates_rounded, y = users)) +
geom_bar(stat = 'identity', color = 'white') +
scale_x_continuous(limits = c(0, 20)) +
labs(x = 'Updates Per Day', y = 'Users')
users <- users %>%
mutate(updates_rounded = round(updates_per_day, 0))
# Group by updates
by_updates <- users %>%
group_by(updates_rounded) %>%
summarise(users = n_distinct(user_id))
ggplot(by_updates, aes(x = updates_rounded, y = users)) +
geom_bar(stat = 'identity', color = 'white') +
labs(x = 'Updates Per Day', y = 'Users')
ggplot(filter(by_updates, updates_rounded <= 10), aes(x = as.factor(updates_rounded), y = users)) +
geom_bar(stat = 'identity', color = 'white') +
labs(x = 'Updates Per Day', y = 'Users')
ggplot(filter(by_updates, updates_rounded <= 10), aes(x = as.factor(updates_rounded), y = users)) +
geom_bar(stat = 'identity') +
labs(x = 'Updates Per Day', y = 'Users')
ggplot(filter(by_updates, updates_rounded <= 10), aes(x = as.factor(updates_rounded), y = users)) +
geom_bar(stat = 'identity') +
labs(x = 'Updates Per Day', y = 'Users')
summary(users$updates_per_day)
summary(users$updates_per_day, ignore.na = T)
summary(users$updates_per_day, na.rm = T)
summary(filter(users, days_since_join > 0)$updates_per_day, na.rm = T)
profiles <- get_look(3920)
colnames(profiles) <- c('user_id', 'profiles')
summary(profiles$profiles)
ggplot(by_profile, aes(x = as.factor(profiles), y = users)) +
geom_bar(stat = 'identity') +
labs(x = 'Number of Profiles', y = 'Users')
by_profile <- profiles %>%
group_by(profiles) %>%
summarise(users = n_distinct(user_id))
ggplot(by_profile, aes(x = as.factor(profiles), y = users)) +
geom_bar(stat = 'identity') +
labs(x = 'Number of Profiles', y = 'Users')
ggplot(by_profile, aes(x = as.factor(profiles), y = users)) +
geom_bar(stat = 'identity') +
labs(x = 'Number of Profiles', y = 'Users')
con <- redshift_connect()
users <- users %>%
left_join(shared_next, by = 'user_id')
users[is.na(users$count)]$count <- 0
users$count[is.na(users$count)] <- 0
users <- users %>%
mutate(has_shared_next = ifelse(count > 0, 'yes', 'no'))
users %>%
group_by(has_shared_next) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users/sum(users))
users$count <- NULL
# Drop previous action count column
users$count <- NULL
# Join action counts
users <- users %>%
left_join(shared_next, by = 'user_id')
# Replace NA's with 0s
users$count[is.na(users$count)] <- 0
# Indicate if they have used it
users <- users %>%
mutate(has_shared_next = ifelse(count > 0, 'yes', 'no'))
users %>%
group_by(has_shared_next) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users/sum(users))
con <- redshift_connect()
con <- redshift_connect()
users$count <- NULL
users$count <- NULL
users <- users %>%
left_join(custom, by = 'user_id')
users$count[is.na(users$count)] <- 0
users <- users %>%
mutate(has_custom = ifelse(count > 0, 'yes', 'no'))
users %>%
group_by(has_custom) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users/sum(users))
users$count <- NULL
# Join action counts
users <- users %>%
left_join(custom, by = 'user_id')
# Replace NA's with 0s
users$count[is.na(users$count)] <- 0
# Indicate if they have used it
users <- users %>%
mutate(has_custom = ifelse(count > 0, 'yes', 'no'))
users %>%
group_by(has_custom) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users/sum(users))
library(buffer); library(dplyr); library(ggplot2)
con <- redshift_connect()
con <- redshift_connect()
con <- redshift_connect()
setwd("Users/julianwinternheimer/Documents/analysis")
getwd()
save(users, file = "user_profiles.Rda")
load("user_profiles.Rda")
con <- redshift_connect()
con <- redshift_connect()
# Set WD
setwd("/Users/julianwinternheimer/Documents/analysis")
# Save users
save(users, file = "user_profiles.Rda")
# Load users data
load("user_profiles.Rda")
con <- redshift_connect()
# Set WD
setwd("/Users/julianwinternheimer/Documents/analysis")
# Save users
save(updates, file = "user_profile_updates.Rda")
# Load users data
load("user_profile_updates.Rda")
# Set WD
setwd("/Users/julianwinternheimer/Documents/analysis")
# Save users
save(updates, file = "user_profile_updates.Rda")
# Load users data
load("user_profile_updates.Rda")
# Join updates and users
users <- users %>%
left_join(updates, by = 'user_id')
users[is.na(users)] <- 0
summary(users$profile_count)
ggplot(users, aes(x = profile_count)) +
geom_density()
ggplot(users, aes(x = profile_count)) +
geom_density() +
scale_x_continuous(limits = c(0,5))
by_profile <- users %>%
group_by(profile_count) %>%
summarise(users = n_distinct(user_id))
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity') +
scale_x_continuous(limits = c(0,10))
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = c(0,10))
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity')
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity') +
coord_cartesian(xlim = c(0,10))
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity') +
coord_cartesian(xlim = c(0,10)) +
scale_y_continuous(labels = comma) +
labs(x = 'Number of Active Profiles', y = 'Users')
options(scipen=10000)
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity') +
coord_cartesian(xlim = c(0,10)) +
labs(x = 'Number of Active Profiles', y = 'Users')
options(scipen=10000)
ggplot(by_profile, aes(x = as.factor(profile_count), y = users)) +
geom_bar(stat = 'identity') +
coord_cartesian(xlim = c(1,10)) +
labs(x = 'Number of Active Profiles', y = 'Users')
by_profile <- users %>%
group_by(profile_count) %>%
summarise(users = n_distinct(user_id)) %>%
mutate(proportion = users / sum(users))
ggplot(users, aes(x = profile_count)) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 20))
ggplot(users, aes(x = profile_count)) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 10)) +
labs(x = 'Number of Active Profiles', y = '' , title = 'Profile Count CDF')
ggplot(users, aes(x = profile_count)) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
labs(x = 'Number of Active Profiles', y = '' , title = 'Profile Count CDF')
ggplot(users, aes(x = profile_count)) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 10)) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
scale_y_continuous(breaks = seq(0, 1, 0.2)) +
labs(x = 'Number of Active Profiles', y = '' , title = 'Profile Count CDF')
nchar("5911d2aa12524dde76045be4")
nchar("5931959e6f4d22fc7f900909")
nchar("org.buffer.android.iap.awesome.monthly")
library(devtools)
devtools::install_github('rstudio/blogdown')
blogdown::install_theme('halogenica/beautifulhugo')
new_site()
library(blogdown)
new_site()
